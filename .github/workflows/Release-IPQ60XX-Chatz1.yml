name: Release-IPQ60XX-Chatz1
run-name: Release - All Models

on:
  schedule:
    # 北京时间周五0点 (UTC时间周四16点)
    - cron: '0 16 * * 4'
  workflow_dispatch:  # 保留手动触发功能，但不需要选择模型

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-24.04]
        model: 
          - immwrt_ipq60xx_Pro
          - immwrt_ipq60xx_Max
          - immwrt_ipq60xx_Ultra
          - libwrt_ipq60xx_Pro
          - libwrt_ipq60xx_Max
          - libwrt_ipq60xx_Ultra
      fail-fast: false  # 一个模型失败不影响其他模型
    runs-on: ${{ matrix.os }}

    steps:
      - name: Free disk space
        uses: sbwml/actions@free-disk

      - name: Check Disk Space
        run: |
          FREE_SPACE=$(df -BG / | awk 'NR==2 {print $4}' | tr -d 'G')
          if [ "$FREE_SPACE" -lt 20 ]; then
            echo "Insufficient disk space: ${FREE_SPACE}GB available"
            exit 1
          fi

      - name: Build System Setup
        run: |
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt -yqq install dos2unix
          sudo -E apt -yqq install libfuse-dev
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Build Date and Timezone
        run: |
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          export BUILD_SRC=$(awk -F"=" '/REPO_URL/ {print $NF}' "./compilecfg/${{ matrix.model }}.ini")
          echo "BUILD_SRC=$BUILD_SRC" >> $GITHUB_ENV

      - name: Pre Clone
        run: |
          for i in {1..3}; do
            ./pre_clone_action.sh ${{ matrix.model }} && break || sleep 30
          done

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ./action_build/.ccache
            ./action_build/staging_dir
          key: ${{ matrix.os }}-${{ matrix.model }}-${{ hashFiles('**/repo_flag') }}-${{ env.BUILD_DATE }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.model }}-${{ hashFiles('**/repo_flag') }}-

      - name: Refresh the cache
        run: |
          if [ -d "./action_build/staging_dir" ]; then
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi

      - name: Build Firmware
        run: ./build.sh ${{ matrix.model }}

      - name: Get Kernel Verion
        run: |
          # 获取内核版本
          echo "KVER=$(find ./action_build/dl -maxdepth 1 -name "linux-[4-6]\.*" | sort -r | head -n 1 | grep -oE "[4-6]\.[0-9]{1,3}\.[0-9]{1,3}")" >> $GITHUB_ENV

      - name: Delete Old Cache
        run: |
          # 获取缓存列表并删除
          gh cache list --key ${{ matrix.os }}-${{ matrix.model }}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done || true
          # 输出缓存状态
          echo "========cache status========"
          echo "ccache: $(du -sh ./action_build/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./action_build/staging_dir | cut -f 1)"

      - name: Machine Information
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          df -h
          echo "=============================================="

      - name: Prepare Artifacts
        run: |
         # 创建模型特定的目录
          mkdir -p ./artifacts/${{ matrix.model }}
          # 复制固件文件
          cp -r ./firmware/* ./artifacts/${{ matrix.model }}/
          # 复制最新的配置文件
          find ./action_build -name ".config" -printf "%T@ %p\n" | sort -n | tail -1 | cut -d' ' -f2- | xargs -I {} cp -r {} ./artifacts/${{ matrix.model }}/
          find ./action_build -name ".config.buildinfo" -printf "%T@ %p\n" | sort -n | tail -1 | cut -d' ' -f2- | xargs -I {} cp -r {} ./artifacts/${{ matrix.model }}/
          find ./action_build -name "*.manifest" -exec cp {} ./artifacts/${{ matrix.model }}/ \;
          # 保存模型信息
          echo "${{ env.BUILD_SRC }}" > ./artifacts/${{ matrix.model }}/source_info.txt
          echo "${{ env.KVER }}" > ./artifacts/${{ matrix.model }}/kernel_version.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.model }}-artifacts
          path: ./artifacts/${{ matrix.model }}/
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-24.04
    if: always()  # 即使有构建失败也尝试发布
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Build Date
        run: |
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Prepare Release Body
        run: |
         cat > release_body.txt << 'OUTER_EOF'
         云编译发布
         编译时间: $(TZ=Asia/Shanghai date)
    
         OUTER_EOF
    
         # 为每个模型添加信息
         for model_dir in ./artifacts/*; do
         if [ -d "$model_dir" ]; then
         model=$(basename "$model_dir")
         # 提取模型信息
         MODEL_PART=$(echo "$model" | cut -d'_' -f1-3)
         DEVICE=$(echo "$model" | cut -d'_' -f4)
         PREFIX=$(echo "$MODEL_PART" | cut -d'_' -f1)
         SUFFIX=$(echo "$MODEL_PART" | cut -d'_' -f3)
        
         # 添加模型信息到release body
         echo "## 模型: $PREFIX-$SUFFIX-$DEVICE" >> release_body.txt
         echo "" >> release_body.txt
        
         # 获取源码信息
         if [ -f "$model_dir/source_info.txt" ]; then
          echo "源码：$(cat $model_dir/source_info.txt)" >> release_body.txt
         fi
        
         # 获取内核版本
         if [ -f "$model_dir/kernel_version.txt" ]; then
          echo "Kernel: $(cat $model_dir/kernel_version.txt)" >> release_body.txt
         fi
        
         echo "WIFI密码: ${{ env.WIFI_PASSWORD }}" >> release_body.txt
         echo "LAN地址: ${{ env.LAN_ADDRESS }}" >> release_body.txt
        
         # 获取插件列表
         manifest_files=$(find "$model_dir" -name "*.manifest" -type f)
         if [ -n "$manifest_files" ]; then
          echo "插件：" >> release_body.txt
          grep -oP "luci-app(-[a-zA-Z0-9]+)+" $manifest_files | awk -F":" '{print $NF}' | sort -u >> release_body.txt
         else
          echo "插件：无" >> release_body.txt
         fi
        
         echo "" >> release_body.txt
         fi
         done
         
      - name: Release Firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_DATE }}
          files: ./artifacts/**/*
          body_path: ./release_body.txt
