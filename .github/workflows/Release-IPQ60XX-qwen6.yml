# File: Release-IPQ60XX-qwen6.yml

name: Release IPQ60XX - Qwen6
run-name: Scheduled Release - ${{ matrix.model }}

# 定时触发：每周五北京时间 00:00 (对应 UTC 16:00)
on:
  schedule:
    - cron: '0 16 * * 5' # UTC 时间，每周五 16:00

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-24.04]
        model: [
          immwrt_ipq60xx_Pro,
          immwrt_ipq60xx_Max,
          immwrt_ipq60xx_Ultra,
          libwrt_ipq60xx_Pro,
          libwrt_ipq60xx_Max,
          libwrt_ipq60xx_Ultra
        ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Free disk space
        uses: sbwml/actions@free-disk

      - name: Build System Setup
        run: |
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt -yqq install dos2unix
          sudo -E apt -yqq install libfuse-dev
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Build Date and Timezone
        run: |
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          # 使用 matrix.model 而非 inputs.model
          export BUILD_SRC=$(awk -F"=" '/REPO_URL/ {print $NF}' "./compilecfg/${{ matrix.model }}.ini")
          echo "BUILD_SRC=$BUILD_SRC" >> $GITHUB_ENV

      - name: Pre Clone
        run: ./pre_clone_action.sh ${{ matrix.model }}

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ./action_build/.ccache
            ./action_build/staging_dir
          key: ${{ matrix.os }}-${{ hashFiles('**/repo_flag') }}-${{ env.BUILD_DATE }}-${{ matrix.model }}
          restore-keys: |
            ${{ matrix.os }}-${{ hashFiles('**/repo_flag') }}-${{ matrix.model }}-

      - name: Refresh the cache
        run: |
          if [ -d "./action_build/staging_dir" ]; then
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi

      - name: Build Firmware
        run: ./build.sh ${{ matrix.model }}

      - name: Get Kernel Version
        run: |
          # 获取内核版本
          echo "KVER=$(find ./action_build/dl -maxdepth 1 -name "linux-[4-6]\.*" | sort -r | head -n 1 | grep -oE "[4-6]\.[0-9]{1,3}\.[0-9]{1,3}")" >> $GITHUB_ENV

      - name: Delete Old Cache
        run: |
          # 获取缓存列表并删除
          gh cache list --key ${{ matrix.os }}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | while read -r key; do
            gh cache delete "$key"
          done
          # 输出缓存状态
          echo "========cache status========"
          echo "ccache: $(du -sh ./action_build/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./action_build/staging_dir | cut -f 1)"

      - name: Machine Information
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          df -h
          echo "=============================================="

      - name: Prepare Release Body
        run: |
          echo "云编译发布" > release_body.txt
          echo "源码：${{ env.BUILD_SRC }}" >> release_body.txt
          echo "Kernel: ${{ env.KVER }}" >> release_body.txt
          echo "WIFI密码: 12345678" >> release_body.txt
          echo "LAN地址: 192.168.111.1" >> release_body.txt
          echo "插件：" >> release_body.txt
          echo "$(grep -oP "luci-app(-[a-zA-Z0-9]{1,}){1,}" ./firmware/*.manifest | awk -F":" '{print $NF}')"  >> release_body.txt

      # 发布包含 .config, .config.buildinfo, .manifest 的 release
      - name: Release Firmware with Configs
        uses: softprops/action-gh-release@v2
        with:
          # 使用 matrix.model 作为 tag 名称，例如 immwrt_ipq60xx_Pro
          tag_name: ${{ matrix.model }}
          # 指定要发布的文件
          files: |
            ./firmware/*.bin
            ./firmware/*.img
            ./firmware/*.tar.gz
            ./firmware/*.config
            ./firmware/*.config.buildinfo
            ./firmware/*.manifest
          # 指定 release body 的文件
          body_path: ./release_body.txt
