name: RLS-ipq60xx-1
run-name: Release - All Models

on:
  schedule:
    # 北京时间周五0点 (UTC时间周四16点)
    - cron: '0 16 * * 4'
  workflow_dispatch:  # 保留手动触发功能，但不需要选择模型

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  WIFI_PASSWORD: "12345678"
  LAN_ADDRESS: "192.168.111.1"
  # 设置默认发布包
  DEFAULT_BRANCH: "immwrt"
  DEFAULT_CONFIG: "Ultra"

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-24.04]
        model: 
          - immwrt_ipq60xx_Pro
          - immwrt_ipq60xx_Max
          - immwrt_ipq60xx_Ultra
          - libwrt_ipq60xx_Pro
          - libwrt_ipq60xx_Max
          - libwrt_ipq60xx_Ultra
        device: [re-ss-01, re-cs-02]  # 添加设备维度
      fail-fast: false  # 一个模型失败不影响其他模型
    runs-on: ${{ matrix.os }}

    steps:
      - name: Free disk space
        uses: sbwml/actions@free-disk

      - name: Check Disk Space
        run: |
          FREE_SPACE=$(df -BG / | awk 'NR==2 {print $4}' | tr -d 'G')
          if [ "$FREE_SPACE" -lt 20 ]; then
            echo "Insufficient disk space: ${FREE_SPACE}GB available"
            exit 1
          fi

      - name: Build System Setup
        run: |
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E apt -yqq install dos2unix
          sudo -E apt -yqq install libfuse-dev
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Build Date and Timezone
        run: |
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          export BUILD_SRC=$(awk -F"=" '/REPO_URL/ {print $NF}' "./compilecfg/${{ matrix.model }}.ini")
          echo "BUILD_SRC=$BUILD_SRC" >> $GITHUB_ENV

      - name: Pre Clone
        run: |
          # 设置超时时间（5分钟）
          TIMEOUT=300
          START_TIME=$(date +%s)
          
          for i in {1..3}; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            
            if [ $ELAPSED -gt $TIMEOUT ]; then
              echo "Pre clone timeout after $TIMEOUT seconds"
              exit 1
            fi
            
            ./pre_clone_action.sh ${{ matrix.model }} && break || sleep 30
          done

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ./action_build/.ccache
            ./action_build/staging_dir
          key: ${{ matrix.os }}-${{ matrix.model }}-${{ matrix.device }}-${{ hashFiles('**/repo_flag') }}-${{ env.BUILD_DATE }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.model }}-${{ matrix.device }}-${{ hashFiles('**/repo_flag') }}-

      - name: Refresh the cache
        run: |
          if [ -d "./action_build/staging_dir" ]; then
            find "./action_build/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r dir; do
                find "$dir" -type f -exec touch {} +
            done
          fi

      - name: Build Firmware
        run: ./build.sh ${{ matrix.model }}

      - name: Get Kernel Version
        run: |
          # 获取内核版本
          KERNEL_DIR=$(find ./action_build/dl -maxdepth 1 -name "linux-[4-6]\.*" | sort -r | head -n 1)
          if [ -n "$KERNEL_DIR" ]; then
            KVER=$(echo "$KERNEL_DIR" | grep -oE "[4-6]\.[0-9]{1,3}\.[0-9]{1,3}")
            echo "KVER=$KVER" >> $GITHUB_ENV
          else
            echo "KVER=unknown" >> $GITHUB_ENV
          fi

      - name: Delete Old Cache
        run: |
          # 获取缓存列表并删除（限制数量避免超时）
          gh cache list --key ${{ matrix.os }}-${{ matrix.model }}-${{ matrix.device }}-${{ hashFiles('**/repo_flag') }}- --json key --jq '.[] | .key' | head -n 10 | while read -r key; do
            gh cache delete "$key"
          done || true
          # 输出缓存状态
          echo "========cache status========"
          echo "ccache: $(du -sh ./action_build/.ccache | cut -f 1)"
          echo "staging: $(du -sh ./action_build/staging_dir | cut -f 1)"

      - name: Machine Information
        run: |
          echo "=============================================="
          lscpu | grep -E "name|Core|Thread"
          echo "=============================================="
          df -h
          echo "=============================================="

      - name: Prepare Artifacts
        run: |
          # 创建模型特定的目录
          mkdir -p ./artifacts/${{ matrix.model }}_${{ matrix.device }}
          
          # 复制固件文件
          cp -r ./firmware/* ./artifacts/${{ matrix.model }}_${{ matrix.device }}/ 2>/dev/null || true
          
          # 复制配置文件（处理文件和目录）
          find ./action_build -name ".config" -printf "%T@ %p\n" | sort -n | tail -1 | cut -d' ' -f2- | while read config_file; do
            if [ -f "$config_file" ]; then
              cp "$config_file" ./artifacts/${{ matrix.model }}_${{ matrix.device }}/
            elif [ -d "$config_file" ]; then
              cp -r "$config_file" ./artifacts/${{ matrix.model }}_${{ matrix.device }}/
            fi
          done
          
          find ./action_build -name ".config.buildinfo" -printf "%T@ %p\n" | sort -n | tail -1 | cut -d' ' -f2- | while read config_file; do
            if [ -f "$config_file" ]; then
              cp "$config_file" ./artifacts/${{ matrix.model }}_${{ matrix.device }}/
            elif [ -d "$config_file" ]; then
              cp -r "$config_file" ./artifacts/${{ matrix.model }}_${{ matrix.device }}/
            fi
          done
          
          # 复制manifest文件
          find ./action_build -name "*.manifest" -exec cp {} ./artifacts/${{ matrix.model }}_${{ matrix.device }}/ \; 2>/dev/null || true
          
          # 复制ipk/apk包（容错处理）
          if [ -d "./action_build/bin/targets/ipq60xx/generic/packages" ]; then
            mkdir -p ./artifacts/${{ matrix.model }}_${{ matrix.device }}/packages
            # 复制所有包文件（ipk和apk）
            find ./action_build/bin/targets/ipq60xx/generic/packages -name "*.ipk" -o -name "*.apk" | \
              xargs -I {} cp {} ./artifacts/${{ matrix.model }}_${{ matrix.device }}/packages/ 2>/dev/null || true
          fi
          
          # 重命名固件文件
          cd ./artifacts/${{ matrix.model }}_${{ matrix.device }}
          
          # 从模型名称中提取前缀和后缀
          PREFIX=$(echo "${{ matrix.model }}" | cut -d'_' -f1)
          SUFFIX=$(echo "${{ matrix.model }}" | cut -d'_' -f3)
          
          # 遍历固件文件并重命名
          for file in *.bin; do
            if [ -f "$file" ]; then
              # 确定固件类型（固件名称中肯定包含sysupgrade或factory）
              if [[ "$file" == *"factory"* ]]; then
                FIRMWARE_TYPE="factory"
              elif [[ "$file" == *"sysupgrade"* ]]; then
                FIRMWARE_TYPE="sysupgrade"
              fi
              
              # 构建新文件名
              NEW_FILENAME="${PREFIX}-${{ matrix.device }}-${FIRMWARE_TYPE}-${SUFFIX}.bin"
              
              # 重命名文件
              mv "$file" "$NEW_FILENAME" 2>/dev/null || true
            fi
          done
          
          # 重命名manifest文件
          for file in *.manifest; do
            if [ -f "$file" ]; then
              # 构建新文件名
              NEW_FILENAME="${PREFIX}-${{ matrix.device }}-manifest-${SUFFIX}.manifest"
              
              # 重命名文件
              mv "$file" "$NEW_FILENAME" 2>/dev/null || true
            fi
          done
          
          # 重命名配置文件
          for file in .config .config.buildinfo; do
            if [ -f "$file" ] || [ -d "$file" ]; then
              # 构建新文件名
              NEW_FILENAME="${PREFIX}-${{ matrix.device }}-config-${SUFFIX}${file#.config}"
              
              # 重命名文件
              mv "$file" "$NEW_FILENAME" 2>/dev/null || true
            fi
          done

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.model }}_${{ matrix.device }}-artifacts
          path: ./artifacts/${{ matrix.model }}_${{ matrix.device }}/
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-24.04
    if: always()  # 即使有构建失败也尝试发布
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Build Date
        run: |
          export BUILD_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Check Build Status
        if: always()
        run: |
          # 检查是否有构建失败的任务
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "有构建失败的任务，但继续发布..."
          fi

      - name: Filter Artifacts
        run: |
          # 只保留默认分支和配置的artifacts
          DEFAULT_MODEL="${{ env.DEFAULT_BRANCH }}_ipq60xx_${{ env.DEFAULT_CONFIG }}"
          
          # 创建临时目录
          mkdir -p ./filtered_artifacts
          
          # 复制默认分支和配置的artifacts
          for device in re-ss-01 re-cs-02; do
            if [ -d "./artifacts/${DEFAULT_MODEL}_${device}-artifacts" ]; then
              cp -r "./artifacts/${DEFAULT_MODEL}_${device}-artifacts" "./filtered_artifacts/${DEFAULT_MODEL}_${device}"
            fi
          done
          
          # 替换原始artifacts目录
          rm -rf ./artifacts
          mv ./filtered_artifacts ./artifacts

      - name: Prepare Release Body
        run: |
          cat > release_body.txt << 'OUTER_EOF'
          云编译发布
          编译时间: $(TZ=Asia/Shanghai date)
          
          OUTER_EOF
          
          # 为每个模型添加信息
          for model_dir in ./artifacts/*; do
            if [ -d "$model_dir" ]; then
              model=$(basename "$model_dir")
              # 提取模型信息
              MODEL_PART=$(echo "$model" | cut -d'_' -f1-3)
              DEVICE=$(echo "$model" | cut -d'_' -f4)
              PREFIX=$(echo "$MODEL_PART" | cut -d'_' -f1)
              SUFFIX=$(echo "$MODEL_PART" | cut -d'_' -f3)
              
              # 添加模型信息到release body
              echo "## 模型: $PREFIX-$SUFFIX-$DEVICE" >> release_body.txt
              echo "" >> release_body.txt
              
              # 获取源码信息
              BUILD_SRC=$(grep -r "REPO_URL" ./compilecfg/${MODEL_PART}.ini | cut -d'=' -f2)
              echo "源码：$BUILD_SRC" >> release_body.txt
              
              # 获取内核版本
              KVER=$(find ./action_build/dl -maxdepth 1 -name "linux-[4-6]\.*" | sort -r | head -n 1 | grep -oE "[4-6]\.[0-9]{1,3}\.[0-9]{1,3}")
              echo "Kernel: $KVER" >> release_body.txt
              
              echo "WIFI密码: ${{ env.WIFI_PASSWORD }}" >> release_body.txt
              echo "LAN地址: ${{ env.LAN_ADDRESS }}" >> release_body.txt
              
              # 获取插件列表
              manifest_files=$(find "$model_dir" -name "*-manifest-${SUFFIX}.manifest" -type f)
              if [ -n "$manifest_files" ]; then
                echo "插件：" >> release_body.txt
                grep -oP "luci-app(-[a-zA-Z0-9]+)+" $manifest_files | awk -F":" '{print $NF}' | sort -u >> release_body.txt
              else
                echo "插件：无" >> release_body.txt
              fi
              
              echo "" >> release_body.txt
            fi
          done

      - name: Release Firmware
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ipq60xx_${{ env.BUILD_DATE }}
          files: ./artifacts/**/*
          body_path: ./release_body.txt
